[General]
description = "multiple UAVs hovering"

ned-path = .;../../samples/inet/src/inet

# Visualizer settings
*.visualizer.osgVisualizer.typename = "IntegratedOsgVisualizer"
*.visualizer.osgVisualizer.sceneVisualizer.typename = "SceneOsgEarthVisualizer"
*.visualizer.osgVisualizer.sceneVisualizer.mapFile = "map.earth"
*.visualizer.osgVisualizer.sceneVisualizer.sceneImageSize = 10000m
**.sceneMinX = -10000m
**.sceneMinY = -10000m
**.sceneMinZ = -10000m
**.sceneMaxX = 10000m
**.sceneMaxY = 10000m
**.sceneMaxZ = 10000m

**.result-recording-modes = default,-vector,-histogram

**.dataReceived.result-recording-modes = all,-vector
**.dataLoad.result-recording-modes = all,-vector
**.bufferLoad.result-recording-modes = all,-vector

**.vector-recording = false

**.wlan[0].radio.displayCommunicationRange = true
#*.visualizer.*.physicalLinkVisualizer.displayLinks = true
#*.visualizer.*.dataLinkVisualizer.displayLinks = true
#*.visualizer.*.networkRouteVisualizer.displayRoutes = true
#*.visualizer.*.*LinkVisualizer.lineShift = 0
#*.visualizer.*.networkRouteVisualizer.lineShift = 0

# network node visualization: disable labels
*.visualizer.osgVisualizer.networkNodeVisualizer.displayModuleName = true

# enable drone load visualization
*.visualizer.*.statisticVisualizer.signalName = "dataLoad"
*.visualizer.*.statisticVisualizer.format = "(%v)"
*.visualizer.*.statisticVisualizer.textColor = "red"
*.visualizer.*.statisticVisualizer.font = "Courier New, 12px, bold"
*.visualizer.*.statisticVisualizer.opacity = 1
*.visualizer.*.statisticVisualizer.sourceFilter = "*.quads[*].** *.groundStation.**"

# mobility visualization
*.visualizer.*.mobilityVisualizer.displayMobility = true # master switch
*.visualizer.*.mobilityVisualizer.displayPositions = true
*.visualizer.*.mobilityVisualizer.displayOrientations = true
*.visualizer.*.mobilityVisualizer.displayVelocities = true
*.visualizer.*.mobilityVisualizer.displayMovementTrails = true
*.visualizer.*.mobilityVisualizer.animationSpeed = 10


# mobility constraint area
**.constraintAreaMinX = -10000m
**.constraintAreaMinY = -10000m
**.constraintAreaMinZ = -10000m
**.constraintAreaMaxX = 10000m
**.constraintAreaMaxY = 10000m
**.constraintAreaMaxZ = 10000m


# Coordinates of the scene origin on the map
#BSB
#*.coordinateSystem.sceneLatitude = -15.84584deg
#*.coordinateSystem.sceneLongitude = -47.93052deg
#*.coordinateSystem.sceneHeading = 90deg

#PUC
#*.coordinateSystem.sceneLongitude = -43.22260deg
#*.coordinateSystem.sceneLatitude = -22.97556deg
#*.coordinateSystem.sceneHeading = 90deg # scene orientation

#Campo
*.coordinateSystem.sceneLongitude = -47.926634deg
*.coordinateSystem.sceneLatitude = -15.840075deg
*.coordinateSystem.sceneHeading = 0deg # scene orientation

#environment
*.environment.ground.typename = "FlatGround"
*.quads[*].osgModel = "3d/drone.ive.10.scale.0,0,90.rot"
**.mobility.initFromDisplayString = false


*.sensor*.wlan[0].radio.energyConsumer.typename = "SensorStateBasedEpEnergyConsumer"
*.sensor*.wlan[0].radio.energyConsumer.offPowerConsumption = 0mW
*.sensor*.wlan[0].radio.energyConsumer.sleepPowerConsumption = 1mW
*.sensor*.wlan[0].radio.energyConsumer.switchingPowerConsumption = 1mW
*.sensor*.wlan[0].radio.energyConsumer.receiverIdlePowerConsumption = 2mW
*.sensor*.wlan[0].radio.energyConsumer.receiverBusyPowerConsumption = 5mW
*.sensor*.wlan[0].radio.energyConsumer.receiverReceivingPowerConsumption = 10mW
*.sensor*.wlan[0].radio.energyConsumer.transmitterIdlePowerConsumption = 2mW
*.sensor*.wlan[0].radio.energyConsumer.transmitterTransmittingPowerConsumption = 100mW
*.sensor*.energyStorage.typename = "IdealEpEnergyStorage"

*.sensor*.wlan[0].radio.displayInterferenceRange = false

[Config Dadca]
description = "Config for wifi only communication - DADCA"

sim-time-limit = 36000s

# Quad networking:
*.quads[*].numApps = 1
*.quads[*].app[0].typename = "UdpMobileNodeCommunicationApp"
*.quads[*].app[0].localPort = 1000
*.quads[*].app[0].destPort = 1000
*.quads[*].app[0].sendInterval = 1s
#*.quads[*].app[0].startTime =1s
*.quads[*].app[0].stopTime = -1s
*.quads[*].app[0].messageLength = 1454Byte
*.quads[*].protocol.typename = "DadcaProtocol"
*.quads[*].mobility.typename = "DroneMobility"
*.quads[*].mobility.coordinateSystemModule = "coordinateSystem" # Empty if the drone should follow Euclidean coordinates or "coordinateSystem" if it should follow coordinates
*.quads[*].mobility.waypointProximity = 1m
*.quads[*].mobility.speed = 10mps
*.quads[*].mobility.homeLatitude = -15.840068deg
*.quads[*].mobility.homeLongitude = -47.926633deg

# Ground station configs
*.groundStation.mobility.typename = "StationaryMobility"
*.groundStation.mobility.coordinateSystemModule = "coordinateSystem"
*.groundStation.numApps = 1
*.groundStation.app[0].typename = "UdpMobileNodeCommunicationApp"
*.groundStation.app[0].destPort = 1000
*.groundStation.app[0].localPort = 1000
*.groundStation.app[0].sendInterval = 1s
*.groundStation.app[0].messageLength = 1454Byte

*.groundStation.protocol.typename = "DadcaProtocol"
*.groundStation.mobility.initialLatitude = -15.840068deg
*.groundStation.mobility.initialLongitude = -47.926633deg
*.groundStation.mobility.initialAltitude = 0m
#*.groundStation.app[0].startTime = 130s

# General sensor and ground station configurations
*.sensors*.numApps = 1
*.sensors*.mobility.typename = "StationaryMobility"  
*.sensors*.mobility.coordinateSystemModule = "coordinateSystem"
*.sensors*.app[0].typename = "UdpSensorCommunicationApp"
*.sensors*.protocol.typename = "DadcaProtocolSensor"
*.sensors*.app[0].destPort = 1000
*.sensors*.app[0].localPort = 1000
*.sensors*.app[0].sendInterval = 8s
*.sensors*.app[0].startTime = exponential(1s)
*.sensors*.app[0].messageLength = 1454Byte

*.quads[*].protocol.timeoutDuration = 20s

#*.quads[0].app[*].startTime = normal(1s, 1s)
#*.quads[1].app[*].startTime = normal(40s, 45s)
#*.quads[2].app[*].startTime = normal(80s, 85s)
*.quads[0].numFailures = ${numFailuresUAV1=0,1}
#*.quads[1].numFailures = ${numFailuresUAV2=0,1,2,3}

*.quads[*].failures[*].typename = "RandomFailureGenerator"
*.quads[*].failures[*].failureStart = 3600s
*.quads[*].failures[*].failureMinimumInterval = 10s
*.quads[*].failures[*].failureRollTime = 1s
*.quads[*].failures[*].failureChance = 0.001
*.quads[*].failures[*].failureDuration = ${failureDuration=3600s,36000s}

[Config DadcaAck]
extends=Dadca
description="Simulation with DADCA-ACK using drones with wifi radio only"
*.sensors*.protocol.typename = "DadcaAckProtocolSensor"
*.quads[*].protocol.typename = "DadcaAckUAVProtocol"
*.groundStation.protocol.typename = "DadcaAckGroundStationProtocol"
*.quads[*].protocol.maxBufferSize = 10000000
